<?php

namespace App\GraphQL\Mutation\Article;

use App\Article;
use Carbon\Carbon;
use GraphQL\Type\Definition\ResolveInfo;
use GraphQL\Type\Definition\Type;
use Rebing\GraphQL\Support\Mutation;
use Rebing\GraphQL\Support\SelectFields;
use Rebing\GraphQL\Support\UploadType;

class CreateArticle extends Mutation
{
    protected $attributes = [
        'name' => 'CreateArticle',
        'description' => 'A mutation'
    ];

    public function type()
    {
        return \GraphQL::type('ArticleType');
    }

    public function args()
    {
        return [

            'title'=>[
                'type' => Type::nonNull(Type::string())
            ],
            'body'=>[
                'type' => Type::nonNull(Type::string())
            ],
            'photo'=>[
                'type' => UploadType::getInstance()
            ]


        ];
    }

    protected function rules(array $args = [])
    {
        return [

            'title'=>['required', 'min:5'],
            'body'=>['required', 'min:5'],
            'photo'=> ['required', 'image', 'max:1500']


        ]; // TODO: Change the autogenerated stub
    }

    public function resolve($root, $args, SelectFields $fields, ResolveInfo $info)
    {

        $file = $args['photo'];

        $year = Carbon::now()->year;
        $imagePath = "/upload/image/{$year}";
        $fileName = $file->getClientOriginalName();

        $file->move(public_path($imagePath,$fileName));
        $imageUrl = $imagePath . $fileName;

        $article = Article::create([
            'user_id' => 2,
            'title'=> $args['title'],
            'body'=> $args['body'],
            'image'=> $imageUrl,
        ]);

        return $article;
    }
}